I put scheduleActions() in the EventScheduler class because it would be easier to just include the information for the
action as parameters for it than it would be to create the action and then pass it to the method.

I moved the following methods to the ImageStore class because they had to do with images, so I thought it would be
easiest to remember them there.
They didn't use any project-specific object types, so I didn't have much to guide my decision.
+processImageLine()                          <<static>>
+getImages(): List<PImage>                   <<static>>
+setAlpha()                                  <<static>>

I moved the following methods to the WorldModel class because I felt like the ImageStore class was starting to get too
many methods and the WorldModel class had too few. Also, a lot of the code in the methods have to do with manipulating
stuff in the world, so I felt like it was appropriate.
+parseBackground(): boolean
+parseSapling(): boolean
+parseDude(): boolean
+parseFairy(): boolean
+parseTree(): boolean
+parseObstacle(): boolean
+parseHouse(): boolean

I moved the following methods to the WorldModel class because it seemed like the most logical choice based on their
internal code and implementations.
+findNearest(): Optional<Entity>
+addEntity()
+moveEntity()
+removeEntity()
+removeEntityAt()
+getBackgroundImage(): Optional<PImage>
+setBackground()
+getOccupant(): Optional<Entity>
+getOccupancyCell(): Entity
+setOccupancyCell()
+getBackgroundCell(): Background
+setBackgroundCell()

I moved createAnimationAction() and createActivityAction() to the Entity class because Entity instances almost always
have a respective action, so it seemed only logical to move these action creation methods to this class, since they also
take an instance of the Entity object as a parameter.

I moved getNumFromRange() to the Entity class because the transformSapling() method was the only method to use it.

I moved the contains() and clamp() methods to the WorldView class because it was the only class that used them.